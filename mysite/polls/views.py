from django.http import HttpResponse, HttpResponseRedirect
from polls.models import Poll, Choice
# from django.http import Http404
from django.shortcuts import render, get_object_or_404
from django.core.urlresolvers import reverse
from django.views import generic
from django.utils import timezone



#### THE OLD WAY
#
# def index(request):
#     latest_poll_list = Poll.objects.all().order_by('-pub_date')[:5] # Create the list of the latest 5 polls
#     context = {'latest_poll_list': latest_poll_list}    # Pass the list just created as context
#     return render(request, 'polls/index.html', context) # Render the request and the context with the index.htm template
#
# #def detail(request, poll_id):
# #    try:
# #        poll = Poll.objects.get(pk=poll_id)
# #    except Poll.DoesNotExist:
# #        raise Http404
# #    return render(request, 'polls/detail.html', {'poll': poll}) # Context contains the ID of the poll
#
# def detail(request, poll_id):
#     poll = get_object_or_404(Poll, pk=poll_id)
#     return render(request, 'polls/detail.html', {'poll': poll})
#
# def results(request, poll_id):
#     poll = get_object_or_404(Poll, pk=poll_id)
#     return render(request, 'polls/results.html', {'poll': poll})

#### THE NEW WAY

class IndexView(generic.ListView):
    template_name = 'polls/index.html'
    context_object_name = 'latest_poll_list'

    def get_queryset(self):
        """
        Return the last five published polls (not including those set to be
        published in the future).
        """
        return Poll.objects.filter(pub_date__lte=timezone.now()).order_by('-pub_date')[:5]

class DetailView(generic.DetailView): # Display a detail page for a particular type of object
    model = Poll    # Each generic view needs to know what model it will be acting upon
    template_name = 'polls/detail.html' #  Used to tell Django to use a specific template name instead of the autogenerated default template name

    def get_queryset(self):
        """
        Excludes any polls that aren't published yet.
        """
        return Poll.objects.filter(pub_date__lte=timezone.now())

class ResultsView(generic.DetailView): # Display a detail page for a particular type of object
    model = Poll    # Each generic view needs to know what model it will be acting upon
    template_name = 'polls/results.html' #  Used to tell Django to use a specific template name instead of the autogenerated default template name

def vote(request, poll_id):
    p = get_object_or_404(Poll, pk=poll_id)
    try:
        selected_choice = p.choice_set.get(pk=request.POST['choice'])
    except (KeyError, Choice.DoesNotExist):
        # Redisplay the poll voting form.
        return render(request, 'polls/detail.html', {
            'poll': p,
            'error_message': "You didn't select a choice.",
        })
    else:
        selected_choice.votes += 1
        selected_choice.save()
        # Always return an HttpResponseRedirect after successfully dealing
        # with POST data. This prevents data from being posted twice if a
        # user hits the Back button.
        return HttpResponseRedirect(reverse('polls:results', args=(p.id,))) # This accepts two parameters, one is the url given by the
                                                                            # view and the other one is the variable part of that url